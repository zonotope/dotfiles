;; -*-lisp-*-
;;
;; Here is a sample .stumpwmrc file

(in-package :stumpwm)

;;;; colors:
(set-focus-color "dimgray")

;;;; behavior
;; message window gravity
;; :top-left :top-right :bottom-left :bottom-right :center
(setf *message-window-gravity* :center)

;; input window gravity
;; :top-left :top-right :bottom-left :bottom-right :center
(setf *input-window-gravity* :center)

;; in seconds, how long a message will appear for. This must be an integer.
(setf *timeout-wait* 10)

;; tight window borders
(setf *window-border-style* :tight) ;; :none, :thick, :thin, :tight

;;;; bindings:
;; change the prefix key to something else
(set-prefix-key (kbd "C-t"))

;; set the mouse policy to focus follows mouse;
(setf *mouse-focus-policy* :sloppy) ;; :click, :ignore, :sloppy

;; use uxterm for the terminal
(setq *terminal* "uxterm")

;; use chromium for web
(setq *browser* "chromium")

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))


;; ;; start a swank server so emacs can connect
;; TODO: figure out how to load swank with quicklist instead of the brittle path.
(load "/usr/local/share/sbcl/dists/quicklisp/software/slime-2.11/swank-loader.lisp")
(swank-loader:init)

;; fire up a swank server
(defcommand swank () ()
  (swank:create-server :port 4005
                       :style swank:*communication-style*
                       :dont-close t)
  (echo-string (current-screen)
	       "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))

(swank)


;; give conky enough space
;; (resize-head 0 0 25 2560 1415)

;; Read some doc
(define-key *root-map* (kbd "d") "exec evince")
;; Browse somewhere
(define-key *root-map* (kbd "b") "exec chromium")

;; Message window font
(set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

;;;; Window format
(setf *window-format* "%m%s%n %c %15t...|")

(setf *screen-mode-line-format* "%v")

(setf *mode-line-position* :bottom)

;; mode line
(if (not (head-mode-line (current-head)))
     (toggle-mode-line (current-screen) (current-head)))


;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
;; (define-frame-preference "Default"
;;   ;; frame raise lock (lock AND raise == jumpto)
;;   (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
;;   (1 t nil :class "XTerm"))

;; (define-frame-preference "Ardour"
;;   (0 t   t   :instance "ardour_editor" :type :normal)
;;   (0 t   t   :title "Ardour - Session Control")
;;   (0 nil nil :class "XTerm")
;;   (1 t   nil :type :normal)
;;   (1 t   t   :instance "ardour_mixer")
;;   (2 t   t   :instance "jvmetro")
;;   (1 t   t   :instance "qjackctl")
;;   (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

;; (define-frame-preference "Shareland"
;;   (0 t   nil :class "XTerm")
;;   (1 nil t   :class "aMule"))

;; (define-frame-preference "Emacs"
;;   (1 t t :restore "emacs-editing-dump" :title "...xdvi")
;;   (0 t t :create "emacs-dump" :class "Emacs"))
