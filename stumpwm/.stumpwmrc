;; -*-lisp-*-

(in-package :stumpwm)

;;;; default apps
(setq *terminal* "urxvt")
(setq *browser* "firefox")

;;;; setup the desktop
(run-shell-command "xsetroot -cursor_name left_ptr")
(clear-window-placement-rules)
(restore-from-file "~/.stumpwm.d/basic.desk")
(define-frame-preference "main"
    (1 nil nil :class "Conky" :role nil))

;;;; appearance
(set-focus-color "dimgray")
(set-fg-color "#cccccc")
(set-bg-color "#2d2d2d")
(set-border-color "#6699cc")
(set-font "-*-dejavu sans mono-*-r-*-*-*-120-*-*-*-*-*-*")
(setf *hidden-window-color* "^6*")
(setf *window-border-style* :thin) ; :none, :thick, :thin, :tight
(setq *message-window-padding* 5)

;;;; behavior
(setf *message-window-gravity* :center) ; :top-left :top-right :bottom-left
                                        ; :bottom-right :center

(setf *input-window-gravity* :center)   ; :top-left :top-right :bottom-left
                                        ; :bottom-right :center

(setf *window-format* "[%m%s%n: %c--%15t]")

;;; mode line
(setf *mode-line-position* :top)
(setf *screen-mode-line-format* "%v")

;; set the mouse policy to focus follows mouse;
(setf *mouse-focus-policy* :sloppy) ; :click, :ignore, :sloppy

;; in seconds, how long a message will appear for.
(setf *timeout-wait* 5)

;; what shows up in the middle of a newly focused frame
(setf *frame-indicator-text* " boom! ")

(setf *min-frame-height* 20)

;;;; bindings:
(set-prefix-key (kbd "C-t"))


;; b is for browser!
(define-key *root-map* (kbd "b") (concatenate 'string "exec " *browser*))

;; c is for console!
(define-key *root-map* (kbd "c") (concatenate 'string "exec " *terminal*))

;; dmenu is a better launcher than the built in
(define-key *root-map* (kbd "RET") "exec dmenu_run -fn \"Inconsolata-14\"")

;; = to bring up clipboard manager
(define-key *root-map* (kbd "=") "exec clipmenu -fn \"Inconsolata-14\"")

;; w is a better key for the window list
(define-key *root-map* (kbd "w") "windowlist")

;; F for fullscreen
(define-key *root-map* (kbd "F") "fullscreen")

;; C-- to toggle the mode line
(define-key *root-map* (kbd "C--") "mode-line")

;;;; start a swank server so emacs can connect
(ql:quickload :swank)
(swank-loader:init)

(let ((server-running nil))
  (defcommand swank () ()
              (if server-running
                  (progn
                    (swank:stop-server 4005)
                    (echo-string
                     (current-screen)
                     "stopping swank")
                    (setf server-running nil))
                  (progn
                    (swank:create-server :port 4005
                                         :style swank:*communication-style*
                                         :dont-close t)
                    (echo-string (current-screen)
                                 "starting swank. M-x slime-connect RET RET, then (in-package stumpwm)..")
                    (setf server-running t)))))

(define-key *root-map* (kbd "C-s") "swank")

;; start clipboard manager daemon
(run-shell-command "clipmenud")

;; run conky to start
(run-shell-command "conky")
